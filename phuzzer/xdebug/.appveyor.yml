image: Visual Studio 2015
version: '{branch}.{build}'

clone_folder: c:\projects\xdebug

install:
    ps: |
        $ErrorActionPreference = "Stop"
        if (-not (Test-Path c:\build-cache)) {
            mkdir c:\build-cache
        }
        $bname = 'php-sdk-' + $env:BIN_SDK_VER + '.zip'
        if (-not (Test-Path c:\build-cache\$bname)) {
            Invoke-WebRequest "https://github.com/OSTC/php-sdk-binary-tools/archive/$bname" -OutFile "c:\build-cache\$bname"
        }
        $dname0 = 'php-sdk-binary-tools-php-sdk-' + $env:BIN_SDK_VER
        $dname1 = 'php-sdk-' + $env:BIN_SDK_VER
        if (-not (Test-Path c:\build-cache\$dname1)) {
            7z x -aoa c:\build-cache\$bname -oc:\build-cache
            move c:\build-cache\$dname0 c:\build-cache\$dname1
        }

cache:
  - c:\build-cache -> .appveyor.yml

environment:
    BIN_SDK_VER: 2.2.0
    matrix:
        - PHP_VER: 8.0
          ARCH: x64
          TS: 1
          VC: vs16
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
        - PHP_VER: 8.0
          ARCH: x64
          TS: 0
          VC: vs16
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
        - PHP_VER: 8.0
          ARCH: x86
          TS: 1
          VC: vs16
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
        - PHP_VER: 8.0
          ARCH: x86
          TS: 0
          VC: vs16
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
        - PHP_VER: 7.4
          ARCH: x64
          TS: 1
          VC: vc15
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.4
          ARCH: x64
          TS: 0
          VC: vc15
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.4
          ARCH: x86
          TS: 1
          VC: vc15
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.4
          ARCH: x86
          TS: 0
          VC: vc15
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.3
          ARCH: x64
          TS: 1
          VC: vc15
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.3
          ARCH: x64
          TS: 0
          VC: vc15
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.3
          ARCH: x86
          TS: 1
          VC: vc15
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.3
          ARCH: x86
          TS: 0
          VC: vc15
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.2.34
          ARCH: x64
          TS: 1
          VC: vc15
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.2.34
          ARCH: x64
          TS: 0
          VC: vc15
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.2.34
          ARCH: x86
          TS: 1
          VC: vc15
          OPCACHE: no
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - PHP_VER: 7.2.34
          ARCH: x86
          TS: 0
          VC: vc15
          OPCACHE: yes
          APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017

build_script:
    ps: |
        $ErrorActionPreference = "Stop"
        if (2 -le ([regex]::Matches($env:PHP_VER, '\.').count)) {
            $env:PHP_VERSION = $env:PHP_VER
            $env:PHP_RELEASE = 'LEGACY'
        } else {
            $gareleases = Invoke-WebRequest https://windows.php.net/downloads/releases/releases.json | ConvertFrom-Json
            $qareleases = Invoke-WebRequest https://windows.php.net/downloads/qa/releases.json | ConvertFrom-Json
            $garev = [regex]::split($gareleases.$env:PHP_VER.version, '[^\d]')[2]
            $qarev = [regex]::split($qareleases.$env:PHP_VER.version, '[^\d]')[2]
            if ($qarev -gt $garev) {
                $env:PHP_VERSION = $qareleases.$env:PHP_VER.version
                $env:PHP_RELEASE = 'QA'
            } else {
                $env:PHP_VERSION = $gareleases.$env:PHP_VER.version
                $env:PHP_RELEASE = 'GA'
            }
        }
        $ts_part = ''
        if ('0' -eq $env:TS) { $ts_part = '-nts' }
        $bname = 'php-devel-pack-' + $env:PHP_VERSION + $ts_part + '-Win32-' + $env:VC.toUpper() + '-' + $env:ARCH + '.zip'
        if (-not (Test-Path c:\build-cache\$bname)) {
            if ($env:PHP_RELEASE -eq 'LEGACY') {
                Invoke-WebRequest "https://windows.php.net/downloads/releases/archives/$bname" -OutFile "c:\build-cache\$bname"
            } elseif ($env:PHP_RELEASE -eq 'GA') {
                Invoke-WebRequest "https://windows.php.net/downloads/releases/$bname" -OutFile "c:\build-cache\$bname"
            } else {
                Invoke-WebRequest "https://windows.php.net/downloads/qa/$bname" -OutFile "c:\build-cache\$bname"
            }
        }
        $dname0 = 'php-' + $env:PHP_VERSION + '-devel-' + $env:VC.toUpper() + '-' + $env:ARCH
        $dname1 = 'php-' + $env:PHP_VERSION + $ts_part + '-devel-' + $env:VC.toUpper() + '-' + $env:ARCH
        if (-not (Test-Path c:\build-cache\$dname1)) {
            7z x -aoa c:\build-cache\$bname -oc:\build-cache
            if ($env:PHP_VERSION.split('-').length -gt 1) {
                move "c:\build-cache\php-$($env:PHP_VERSION.split('-')[0])-devel-$($env:VC.toUpper())-$env:ARCH" c:\build-cache\$dname0
            }
            if ($dname0 -ne $dname1) {
                move c:\build-cache\$dname0 c:\build-cache\$dname1
            }
        }
        cd c:\projects\xdebug
        $env:PATH = 'c:\build-cache\' + $dname1 + ';' + $env:PATH
        #echo "@echo off" | Out-File -Encoding "ASCII" task.bat
        #echo "" | Out-File -Encoding "ASCII" -Append task.bat
        echo "" | Out-File -Encoding "ASCII" task.bat
        echo "call phpize" | Out-File -Encoding "ASCII" -Append task.bat
        echo "call configure --with-xdebug --enable-debug-pack" | Out-File -Encoding "ASCII" -Append task.bat
        echo "nmake /nologo" | Out-File -Encoding "ASCII" -Append task.bat
        echo "exit %errorlevel%" | Out-File -Encoding "ASCII" -Append task.bat
        $here = (Get-Item -Path "." -Verbose).FullName
        $runner = 'c:\build-cache\php-sdk-' + $env:BIN_SDK_VER + '\phpsdk' + '-' + $env:VC + '-' + $env:ARCH + '.bat'
        $task = $here + '\task.bat'
        & $runner -t $task
        if (-not $?) {
            throw "build failed with errorlevel $LastExitCode"
        }

after_build:
    ps: |
        $ErrorActionPreference = "Stop"
        $ts_part = ''
        if ('0' -eq $env:TS) { $ts_part = '-nts' }
        $arch_part = ''
        if ('x64' -eq $env:ARCH) { $arch_part = '-x86_64' }
        if ($env:APPVEYOR_REPO_TAG -eq "true") {
            $bname = 'php_xdebug-' + $env:APPVEYOR_REPO_TAG_NAME + '-' + $env:PHP_VER.substring(0, 3) + '-' + $env:VC + $ts_part + $arch_part
        } else {
            $bname = 'php_xdebug-' + $env:APPVEYOR_REPO_COMMIT.substring(0, 8) + '-' + $env:PHP_VER.substring(0, 3) + '-' + $env:VC + $ts_part + $arch_part
        }
        $zip_bname = $bname + '.zip'
        $dll_bname = $bname + '.dll'

        $dir = 'c:\projects\xdebug\';
        if ('x64' -eq $env:ARCH) { $dir = $dir + 'x64\' }
        $dir = $dir + 'Release'
        if ('1' -eq $env:TS) { $dir = $dir + '_TS' }

        cp $dir\php_xdebug.dll $dir\$dll_bname
        & 7z a c:\$zip_bname $dir\$dll_bname $dir\php_xdebug.pdb c:\projects\xdebug\LICENSE
        Push-AppveyorArtifact c:\$zip_bname

test_script:
    ps: |
        $ErrorActionPreference = "Stop"
        $ts_part = ''
        if ('0' -eq $env:TS) { $ts_part = '-nts' }
        $bname = 'php-' + $env:PHP_VERSION + $ts_part + '-Win32-' + $env:VC.toUpper() + '-' + $env:ARCH + '.zip'
        if (-not (Test-Path c:\build-cache\$bname)) {
            if ($env:PHP_RELEASE -eq 'LEGACY') {
                Invoke-WebRequest "https://windows.php.net/downloads/releases/archives/$bname" -OutFile "c:\build-cache\$bname"
            } elseif ($env:PHP_RELEASE -eq 'GA') {
                Invoke-WebRequest "https://windows.php.net/downloads/releases/$bname" -OutFile "c:\build-cache\$bname"
            } else {
                Invoke-WebRequest "https://windows.php.net/downloads/qa/$bname" -OutFile "c:\build-cache\$bname"
            }
        }
        $dname = 'php-' + $env:PHP_VERSION + $ts_part + '-' + $env:VC.toUpper() + '-' + $env:ARCH
        if (-not (Test-Path c:\build-cache\$dname)) {
            7z x -aoa c:\build-cache\$bname -oc:\build-cache\$dname
        }
        
        $dir = 'c:\projects\xdebug\';
        if ('x64' -eq $env:ARCH) { $dir = $dir + 'x64\' }
        $dir = $dir + 'Release'
        if ('1' -eq $env:TS) { $dir = $dir + '_TS' }

        $xdebug_dll_opt = '-d zend_extension=' + $dir + '\php_xdebug.dll'


        cd c:\projects\xdebug
        mkdir c:\tests_tmp
        echo "" | Out-File -Encoding "ASCII" task.bat
        echo "set REPORT_EXIT_STATUS=1" | Out-File -Encoding "ASCII" -Append task.bat
        $cmd = 'call configure --with-xdebug --with-prefix=c:\build-cache\' + $dname + " 2>&1"
        echo $cmd | Out-File -Encoding "ASCII" -Append task.bat

        $opts = 'set TEST_PHP_ARGS=-n -d foo=yes'
        if ('yes' -eq $env:OPCACHE) { $opts = $opts + ' -d zend_extension=c:\build-cache\' + $dname + '\ext\php_opcache.dll -d opcache.enabled=1 -d opcache.enable_cli=1' }
        $opts = $opts + ' ' + $xdebug_dll_opt
        echo $opts | Out-File -Encoding "ASCII" -Append task.bat

        $php = "c:\\build-cache\\" + $dname + '\php.exe'
        $test_php_exec = "set TEST_PHP_EXECUTABLE=" + $php
        echo $test_php_exec | Out-File -Encoding "ASCII" -Append task.bat

        echo "set XDEBUG_MODE=off" | Out-File -Encoding "ASCII" -Append task.bat
        $phpv = $php + ' ' + $xdebug_dll_opt + " -v" 
        echo $phpv | Out-File -Encoding "ASCII" -Append task.bat
        echo "echo %errorlevel%" | Out-File -Encoding "ASCII" -Append task.bat
        echo "set XDEBUG_MODE=" | Out-File -Encoding "ASCII" -Append task.bat

        $tcmd = $php + ' run-xdebug-tests.php -q --offline --show-diff --show-slow 1000 --set-timeout 120 -g FAIL,XFAIL,BORK,WARN,LEAK,SKIP --temp-source c:\tests_tmp --temp-target c:\tests_tmp -p c:\build-cache\' + $dname + '\php.exe'
        echo $tcmd | Out-File -Encoding "ASCII" -Append task.bat
        echo "exit %errorlevel%" | Out-File -Encoding "ASCII" -Append task.bat

        $here = (Get-Item -Path "." -Verbose).FullName
        $runner = 'c:\build-cache\php-sdk-' + $env:BIN_SDK_VER + '\phpsdk' + '-' + $env:VC + '-' + $env:ARCH + '.bat'
        $task = $here + '\task.bat'
        & $runner -t $task
        if (-not $?) {
            throw "tests failed with errorlevel $LastExitCode"
        }
