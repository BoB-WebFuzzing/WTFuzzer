<?php
/** @generate-function-entries */

/* This file is generated by the 'xdebug.org:html/docs/create-stubs.php' robot
 * for Xdebug 3.1.0-dev â€” do not modify by hand */

/* Emits a breakpoint to the debug client */
function xdebug_break(): bool {}

/* -----------------------------------------------------------------------*/

/* Returns the calling class */
/** @return mixed */
function xdebug_call_class(int $depth = 2) {}

/* -----------------------------------------------------------------------*/

/* Returns the calling file */
/** @return mixed */
function xdebug_call_file(int $depth = 2) {}

/* -----------------------------------------------------------------------*/

/* Returns the calling function/method */
/** @return mixed */
function xdebug_call_function(int $depth = 2) {}

/* -----------------------------------------------------------------------*/

/* Returns the calling line number */
/** @return mixed */
function xdebug_call_line(int $depth = 2) {}

/* -----------------------------------------------------------------------*/

/* Returns whether code coverage is active */
function xdebug_code_coverage_started(): bool {}

/* -----------------------------------------------------------------------*/

/* Instructs Xdebug to establish a debugging session */
function xdebug_connect_to_client(): bool {}

/* -----------------------------------------------------------------------*/

/* Displays information about a variable */
/** @return void */
function xdebug_debug_zval(string ...$varname) {}

/* -----------------------------------------------------------------------*/

/* Returns information about variables to stdout */
/** @return void */
function xdebug_debug_zval_stdout(string ...$varname) {}

/* -----------------------------------------------------------------------*/

/* Displays information about super globals */
/** @return void */
function xdebug_dump_superglobals() {}

/* -----------------------------------------------------------------------*/

/* Returns code coverage information */
function xdebug_get_code_coverage(): array {}

/* -----------------------------------------------------------------------*/

/* Returns all collected error messages */
function xdebug_get_collected_errors(bool $emptyList = false): array {}

/* -----------------------------------------------------------------------*/

/* Returns the number of functions that have been called */
function xdebug_get_function_count(): int {}

/* -----------------------------------------------------------------------*/

/* Returns information about the stack */
function xdebug_get_function_stack(): array {}

/* -----------------------------------------------------------------------*/

/* Returns the number of garbage collection runs that have been triggered so far */
function xdebug_get_gc_run_count(): int {}

/* -----------------------------------------------------------------------*/

/* Returns the number of variable roots that have been collected so far */
function xdebug_get_gc_total_collected_roots(): int {}

/* -----------------------------------------------------------------------*/

/* Returns the garbage collection statistics filename */
/** @return mixed */
function xdebug_get_gcstats_filename() {}

/* -----------------------------------------------------------------------*/

/* Returns all the headers as set by calls to PHP's header() function */
function xdebug_get_headers(): array {}

/* -----------------------------------------------------------------------*/

/* Returns information about monitored functions */
function xdebug_get_monitored_functions(): array {}

/* -----------------------------------------------------------------------*/

/* Returns the profile information filename */
/** @return mixed */
function xdebug_get_profiler_filename() {}

/* -----------------------------------------------------------------------*/

/* Returns the current stack depth level */
function xdebug_get_stack_depth(): int {}

/* -----------------------------------------------------------------------*/

/* Returns the name of the function trace file */
/** @return mixed */
function xdebug_get_tracefile_name() {}

/* -----------------------------------------------------------------------*/

/* Show and retrieve diagnostic information */
/** @return mixed */
function xdebug_info(string $category = null) {}

/* -----------------------------------------------------------------------*/

/* Returns whether a debugging session is active */
function xdebug_is_debugger_active(): bool {}

/* -----------------------------------------------------------------------*/

/* Returns the current memory usage */
function xdebug_memory_usage(): int {}

/* -----------------------------------------------------------------------*/

/* Sends data to a debugging client */
function xdebug_notify(mixed $data): bool {}

/* -----------------------------------------------------------------------*/

/* Returns the peak memory usage */
function xdebug_peak_memory_usage(): int {}

/* -----------------------------------------------------------------------*/

/* Displays the current function stack */
/** @return void */
function xdebug_print_function_stack(string $message = "user triggered", int $options = 0) {}

/* -----------------------------------------------------------------------*/

/* Set filter */
/** @return void */
function xdebug_set_filter(int $group, int $listType, array $configuration) {}

/* -----------------------------------------------------------------------*/

/* Starts code coverage */
/** @return void */
function xdebug_start_code_coverage(int $options = 0) {}

/* -----------------------------------------------------------------------*/

/* Starts recording all notices, warnings and errors and prevents their display */
/** @return void */
function xdebug_start_error_collection() {}

/* -----------------------------------------------------------------------*/

/* Starts function monitoring */
/** @return void */
function xdebug_start_function_monitor(array $listOfFunctionsToMonitor) {}

/* -----------------------------------------------------------------------*/

/* Start the collection of garbage collection statistics */
/** @return mixed */
function xdebug_start_gcstats(?string $gcstatsFile = null) {}

/* -----------------------------------------------------------------------*/

/* Starts a new function trace */
function xdebug_start_trace(?string $traceFile = null, int $options = 0): ?string {}

/* -----------------------------------------------------------------------*/

/* Stops code coverage */
/** @return void */
function xdebug_stop_code_coverage(bool $cleanUp = true) {}

/* -----------------------------------------------------------------------*/

/* Stops recording of all notices, warnings and errors as started by <a href="/docs/all_functions#xdebug_start_error_collection">xdebug_start_error_collection()</a> */
/** @return void */
function xdebug_stop_error_collection() {}

/* -----------------------------------------------------------------------*/

/* Stops monitoring functions */
/** @return void */
function xdebug_stop_function_monitor() {}

/* -----------------------------------------------------------------------*/

/* Stops the current garbage collection statistics collection */
/** @return false|string */
function xdebug_stop_gcstats() {}

/* -----------------------------------------------------------------------*/

/* Stops the current function trace */
/** @return false|string */
function xdebug_stop_trace() {}

/* -----------------------------------------------------------------------*/

/* Returns the current time index */
function xdebug_time_index(): float {}

/* -----------------------------------------------------------------------*/

/* Displays detailed information about a variable */
/** @return void */
function xdebug_var_dump(mixed ...$variable) {}

/* -----------------------------------------------------------------------*/

